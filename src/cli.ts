#!/usr/bin/env node
import { CONFIG } from "./config";
import { Anthropic } from "@anthropic-ai/sdk";
import fs from "fs";
import path from "path";

const TRANSLATE_ROOT = CONFIG.TRANSLATE_ROOT || "src/configs/translations";
const SOURCE_LANG = CONFIG.SOURCE_LANG;
const TARGET_LANGS = CONFIG.TARGET_LANGS || ["en"];
const MAX_BATCH_SIZE = CONFIG.MAX_BATCH_SIZE;
const apiKey = CONFIG.ANTHROPIC_API_KEY;
const FOLDER_STRUCTURE = CONFIG.FOLDER_STRUCTURE || "language-first"; //  "language-first" or "nested"
const args = process.argv.slice(2);
const FORCE_WRITE = args.includes("--force");

if (!apiKey) throw new Error("‚ùå Missing ANTHROPIC_API_KEY in environment");

const anthropic = new Anthropic({ apiKey });

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á object ‡πÄ‡∏õ‡πá‡∏ô flat format ‡πÅ‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö keys
function flatten(obj: any, prefix = ""): [string, string][] {
  let result: [string, string][] = [];

  // ‡πÉ‡∏ä‡πâ Object.entries ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á keys ‡πÑ‡∏ß‡πâ
  Object.entries(obj).forEach(([key, value]) => {
    const newKey = prefix ? `${prefix}.${key}` : key;

    if (typeof value === "object" && value !== null) {
      // ‡∏£‡∏ß‡∏° arrays ‡∏Ç‡∏≠‡∏á nested objects
      result = result.concat(flatten(value, newKey));
    } else if (value !== undefined) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° key-value pair ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array
      result.push([newKey, String(value)]);
    }
  });

  return result;
}

// ‡πÅ‡∏õ‡∏•‡∏á flat format ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô nested object ‡πÅ‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö
function unflatten(flat: [string, string][]): Record<string, any> {
  const result: Record<string, any> = {};

  for (const [key, value] of flat) {
    const parts = key.split(".");
    parts.reduce((acc, part, idx) => {
      if (idx === parts.length - 1) {
        acc[part] = value;
      } else {
        acc[part] = acc[part] || {};
      }
      return acc[part];
    }, result);
  }

  return result;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏´‡∏•‡∏≤‡∏¢ key ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
async function batchTranslateWithClaude(
  keysAndTexts: [string, string][],
  targetLang: string
): Promise<Record<string, string>> {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á structure ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ
  const textsToTranslate = keysAndTexts
    .map(([key, text]) => `${key}: "${text}"`)
    .join("\n");

  const prompt = `‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå TH ‡πÄ‡∏õ‡πá‡∏ô ${targetLang} ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏£ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n\n${textsToTranslate}\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö key: "‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•" ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô`;

  console.log(`üì¶ Key Different:`);
  console.table(keysAndTexts.map(([key, text]) => ({ Key: key, Text: text })));

  const response = await anthropic.messages.create({
    model: "claude-3-haiku-20240307",
    max_tokens: 4000,
    temperature: 0.2,
    messages: [{ role: "user", content: prompt }],
  });

  const content = response.content[0];
  if (!("text" in content)) {
    throw new Error("Unexpected response format from Claude");
  }

  const translatedText = content.text.trim();
  const results: Record<string, string> = {};

  // ‡πÅ‡∏¢‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô key-value
  const lines = translatedText.split("\n").filter((line) => line.trim() !== "");

  for (const line of lines) {
    // ‡πÅ‡∏¢‡∏Å key ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•
    const match = line.match(/^(.+?):\s*"(.+)"$/);
    if (match && match.length >= 3) {
      const key = match[1].trim();
      const translation = match[2].trim();
      results[key] = translation;
    }
  }

  console.log(`üì¶ Key Generate:`);
  console.table(
    Object.entries(results).map(([key, text]) => ({
      Key: key,
      Translation: text,
    }))
  );

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  for (const [key, text] of keysAndTexts) {
    if (!(key in results)) {
      console.warn(`‚ö†Ô∏è Missing translation for key: ${key}, using source text`);
      results[key] = text;
    }
  }

  return results;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö nested (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°)
function findAllNestedThJsonFolders(baseDir: string): string[] {
  const results: string[] = [];
  function recurse(currentPath: string) {
    try {
      const items = fs.readdirSync(currentPath, { withFileTypes: true });
      const hasSourceLang = items.some(
        (i) => i.isFile() && i.name === `${SOURCE_LANG}.json`
      );
      if (hasSourceLang) {
        results.push(currentPath);
      }
      items
        .filter((i) => i.isDirectory())
        .forEach((dir) => recurse(path.join(currentPath, dir.name)));
    } catch (error) {
      console.error(`Error accessing directory ${currentPath}:`, error);
    }
  }
  recurse(baseDir);
  return results;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö language-first (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
function findAllLanguageFirstJsonFiles(baseDir: string): Array<{
  sourcePath: string;
  targetPaths: Record<string, string>;
  fileIdentifier: string;
}> {
  const results: Array<{
    sourcePath: string;
    targetPaths: Record<string, string>;
    fileIdentifier: string;
  }> = [];

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const sourceLangDir = path.join(baseDir, SOURCE_LANG);
    if (
      !fs.existsSync(sourceLangDir) ||
      !fs.statSync(sourceLangDir).isDirectory()
    ) {
      console.error(`‚ùå Source language directory not found: ${sourceLangDir}`);
      return results;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô recursive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå JSON ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
    function scanDirectory(currentDir: string, relativePath: string = "") {
      const items = fs.readdirSync(currentDir, { withFileTypes: true });

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå JSON
      items
        .filter((item) => item.isFile() && item.name.endsWith(".json"))
        .forEach((file) => {
          const fileName = file.name;
          const relativeFilePath = relativePath
            ? path.join(relativePath, fileName)
            : fileName;
          const fileIdentifier = relativeFilePath
            .replace(/\.json$/, "")
            .replace(/[\\/]/g, "/"); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "_" ‡πÄ‡∏õ‡πá‡∏ô "/"
          const sourcePath = path.join(currentDir, fileName);

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          const targetPaths: Record<string, string> = {};
          for (const lang of TARGET_LANGS) {
            const targetLangDir = path.join(baseDir, lang);
            const targetDir = relativePath
              ? path.join(targetLangDir, relativePath)
              : targetLangDir;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if (!fs.existsSync(targetDir)) {
              fs.mkdirSync(targetDir, { recursive: true });
            }

            targetPaths[lang] = path.join(targetDir, fileName);
          }

          results.push({
            sourcePath,
            targetPaths,
            fileIdentifier,
          });
        });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô subdirectories
      items
        .filter((item) => item.isDirectory())
        .forEach((dir) => {
          const newRelativePath = relativePath
            ? path.join(relativePath, dir.name)
            : dir.name;
          scanDirectory(path.join(currentDir, dir.name), newRelativePath);
        });
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    scanDirectory(sourceLangDir);
  } catch (error) {
    console.error(`‚ùå Error finding language-first JSON files:`, error);
  }

  return results;
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô pathToIdentifier ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ / ‡πÅ‡∏ó‡∏ô _
function pathToIdentifier(fullPath: string): string {
  const relativePath = fullPath.replace(TRANSLATE_ROOT + path.sep, "");
  return relativePath.replace(/\\/g, "/").replace(/\//g, "/");
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á identifier ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ / ‡πÅ‡∏ó‡∏ô _
function relativePathToIdentifier(relativePath: string): string {
  return relativePath.replace(/\\/g, "/").replace(/\//g, "/");
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô isPathSelected ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ / ‡πÅ‡∏ó‡∏ô _
function isPathSelected(identifier: string): boolean {
  if (args.length === 0) return true;

  return args.some((arg) => {
    const argParts = arg.split("|");
    return argParts.some((part) => {
      if (part === identifier) return true;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á identifier
      const parts = identifier.split("/");
      if (parts.includes(part)) return true;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö nested path
      if (identifier.includes(`/${part}/`) || identifier.endsWith(`/${part}`))
        return true;

      return false;
    });
  });
}

// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
function chunkIntoBatches<T>(arr: T[], size: number): T[][] {
  return Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>
    arr.slice(i * size, i * size + size)
  );
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö nested (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°)
async function processNestedStructure() {
  console.log(`üîç Processing with nested structure`);

  const folders = findAllNestedThJsonFolders(TRANSLATE_ROOT);
  console.log(
    `üìÅ Found ${folders.length} folders with ${SOURCE_LANG.toUpperCase()}.json`
  );

  if (folders.length === 0) {
    console.log(`Folders searched in: ${TRANSLATE_ROOT}`);
    console.log(`Current working directory: ${process.cwd()}`);
    return;
  }

  for (const folder of folders) {
    const identifier = pathToIdentifier(folder);

    if (!isPathSelected(identifier)) {
      console.log(`‚è≠Ô∏è Skipping ${identifier} - not selected`);
      continue;
    }

    console.log(`==========================================================`);
    const sourcePath = path.join(folder, `${SOURCE_LANG}.json`);
    console.log(`üîΩ Processing: ${identifier}`);

    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      const sourceJSON = JSON.parse(fs.readFileSync(sourcePath, "utf-8"));
      const flatSource = flatten(sourceJSON);
      const sourceKeys = flatSource.map(([key]) => key);
      console.log(
        `${SOURCE_LANG.toUpperCase()} source: ${sourceKeys.length} keys`
      );

      // ‡πÅ‡∏õ‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      for (const lang of TARGET_LANGS) {
        const langPath = path.join(folder, `${lang}.json`);
        let existingFlatEntries: [string, string][] = [];
        let keysToTranslate: string[] = [];
        let keysToDelete: string[] = [];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (fs.existsSync(langPath)) {
          try {
            const existingJSON = JSON.parse(fs.readFileSync(langPath, "utf-8"));
            existingFlatEntries = flatten(existingJSON);
            const existingKeys = existingFlatEntries.map(([key]) => key);

            // ‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏°‡∏µ‡πÉ‡∏ô th ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•)
            keysToTranslate = sourceKeys.filter(
              (key) => !existingKeys.includes(key)
            );

            // ‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö (‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô th)
            keysToDelete = existingKeys.filter(
              (key) => !sourceKeys.includes(key)
            );

            console.log(
              `üåê ${lang.toUpperCase()}: Found ${existingKeys.length} keys, ${
                keysToTranslate.length
              } new keys to translate, ${keysToDelete.length} keys to remove`
            );
          } catch (error) {
            console.error(`‚ùå Error reading ${lang}.json:`, error);
            keysToTranslate = sourceKeys; // ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            existingFlatEntries = [];
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏ó‡∏∏‡∏Å key
          keysToTranslate = sourceKeys;
          console.log(
            `üåê ${lang.toUpperCase()}: No existing file, will translate all ${
              sourceKeys.length
            } keys`
          );
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if (
          keysToTranslate.length === 0 &&
          keysToDelete.length === 0 &&
          !FORCE_WRITE
        ) {
          console.log(`‚ûñ No changes needed for ${lang}`);
          continue;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á key ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        const existingTranslations = Object.fromEntries(existingFlatEntries);

        // ‡∏•‡∏ö key ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å existingTranslations
        keysToDelete.forEach((key) => {
          delete existingTranslations[key];
        });

        await processTranslation(
          flatSource,
          keysToTranslate,
          existingTranslations,
          lang,
          langPath
        );
      }
    } catch (error) {
      console.error(`‚ùå Error processing folder ${folder}:`, error);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö language-first (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
async function processLanguageFirstStructure() {
  console.log(`üîç Processing with language-first structure`);

  const files = findAllLanguageFirstJsonFiles(TRANSLATE_ROOT);
  console.log(
    `üìÅ Found ${files.length} JSON files in ${SOURCE_LANG} directory (including subdirectories)`
  );

  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏π
  const filesByFolder: Record<string, number> = {};
  files.forEach((file) => {
    const dirname = path.dirname(file.sourcePath);
    const relativeDirname =
      dirname
        .replace(path.join(TRANSLATE_ROOT, SOURCE_LANG), "")
        .replace(/^[\/\\]/, "") || "(root)";
    filesByFolder[relativeDirname] = (filesByFolder[relativeDirname] || 0) + 1;
  });

  if (Object.keys(filesByFolder).length > 0) {
    console.log("üìÇ Files found in directories:");
    Object.entries(filesByFolder).forEach(([dir, count]) => {
      console.log(`   - ${dir}: ${count} file(s)`);
    });
  }

  if (files.length === 0) {
    console.log(`Files searched in: ${path.join(TRANSLATE_ROOT, SOURCE_LANG)}`);
    console.log(`Current working directory: ${process.cwd()}`);
    return;
  }

  for (const file of files) {
    const { sourcePath, targetPaths, fileIdentifier } = file;

    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
    const relativeSourcePath = sourcePath
      .replace(path.join(TRANSLATE_ROOT, SOURCE_LANG), "")
      .replace(/^[\/\\]/, "");

    if (!isPathSelected(fileIdentifier)) {
      console.log(
        `‚è≠Ô∏è Skipping ${relativeSourcePath} (ID: ${fileIdentifier}) - not selected`
      );
      continue;
    }

    console.log(`==========================================================`);
    console.log(`üîΩ Processing: ${relativeSourcePath} (ID: ${fileIdentifier})`);

    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      const sourceJSON = JSON.parse(fs.readFileSync(sourcePath, "utf-8"));
      const flatSource = flatten(sourceJSON);
      const sourceKeys = flatSource.map(([key]) => key);
      console.log(
        `${SOURCE_LANG.toUpperCase()} source: ${sourceKeys.length} keys`
      );

      // ‡πÅ‡∏õ‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      for (const lang of TARGET_LANGS) {
        const langPath = targetPaths[lang];
        const relativeLangPath = langPath
          .replace(path.join(TRANSLATE_ROOT, lang), "")
          .replace(/^[\/\\]/, "");
        let existingFlatEntries: [string, string][] = [];
        let keysToTranslate: string[] = [];
        let keysToDelete: string[] = [];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (fs.existsSync(langPath)) {
          try {
            const existingJSON = JSON.parse(fs.readFileSync(langPath, "utf-8"));
            existingFlatEntries = flatten(existingJSON);
            const existingKeys = existingFlatEntries.map(([key]) => key);

            // ‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏°‡∏µ‡πÉ‡∏ô th ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•)
            keysToTranslate = sourceKeys.filter(
              (key) => !existingKeys.includes(key)
            );

            // ‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö (‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô th)
            keysToDelete = existingKeys.filter(
              (key) => !sourceKeys.includes(key)
            );

            console.log(
              `üåê ${lang.toUpperCase()}: ${relativeLangPath} - Found ${
                existingKeys.length
              } keys, ${keysToTranslate.length} new keys to translate, ${
                keysToDelete.length
              } keys to remove`
            );
          } catch (error) {
            console.error(`‚ùå Error reading ${relativeLangPath}:`, error);
            keysToTranslate = sourceKeys; // ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            existingFlatEntries = [];
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏ó‡∏∏‡∏Å key
          keysToTranslate = sourceKeys;
          console.log(
            `üåê ${lang.toUpperCase()}: ${relativeLangPath} - No existing file, will translate all ${
              sourceKeys.length
            } keys`
          );
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if (
          keysToTranslate.length === 0 &&
          keysToDelete.length === 0 &&
          !FORCE_WRITE
        ) {
          console.log(`‚ûñ No changes needed for ${lang}/${relativeLangPath}`);
          continue;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á key ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        const existingTranslations = Object.fromEntries(existingFlatEntries);

        // ‡∏•‡∏ö key ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å existingTranslations
        keysToDelete.forEach((key) => {
          delete existingTranslations[key];
        });

        await processTranslation(
          flatSource,
          keysToTranslate,
          existingTranslations,
          lang,
          langPath
        );
      }
    } catch (error) {
      console.error(`‚ùå Error processing file ${relativeSourcePath}:`, error);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
async function processTranslation(
  flatSource: [string, string][],
  keysToTranslate: string[],
  existingTranslations: Record<string, string>,
  lang: string,
  outputPath: string
) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á keys ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° text
  const keysToTranslateWithText: [string, string][] = [];
  for (const key of keysToTranslate) {
    const thText = flatSource.find(([k]) => k === key)?.[1] || "";
    keysToTranslateWithText.push([key, thText]);
  }

  // ‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  if (keysToTranslateWithText.length > 0) {
    // ‡πÅ‡∏ö‡πà‡∏á keys ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô batch
    const keyBatches = chunkIntoBatches(
      keysToTranslateWithText,
      MAX_BATCH_SIZE
    );

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ batch
    for (let i = 0; i < keyBatches.length; i++) {
      const batch = keyBatches[i];

      try {
        // ‡πÅ‡∏õ‡∏•‡∏ó‡∏±‡πâ‡∏á batch ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        const translatedBatch = await batchTranslateWithClaude(batch, lang);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô existingTranslations
        Object.entries(translatedBatch).forEach(([key, translatedText]) => {
          existingTranslations[key] = translatedText;
        });
      } catch (error) {
        console.error(`‚ùå Error translating batch ${i + 1}:`, error);

        // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏ó‡∏±‡πâ‡∏á batch ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏õ‡∏•‡∏ó‡∏µ‡∏•‡∏∞ key ‡πÅ‡∏ó‡∏ô
        console.log(
          `‚ö†Ô∏è Falling back to individual key translation for batch ${i + 1}`
        );
        for (const [key, thText] of batch) {
          try {
            console.log(
              `  üî§ Individually translating: ${key.substring(0, 30)}${
                key.length > 30 ? "..." : ""
              }`
            );
            const prompt = `‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå TH ‡πÄ‡∏õ‡πá‡∏ô ${lang} ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏£ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n\n"${thText}"`;

            const response = await anthropic.messages.create({
              model: "claude-3-haiku-20240307",
              max_tokens: 1000,
              temperature: 0.2,
              messages: [{ role: "user", content: prompt }],
            });

            const content = response.content[0];
            if ("text" in content) {
              existingTranslations[key] = content.text
                .trim()
                .replace(/^"|"$/g, "");
            } else {
              existingTranslations[key] = thText;
            }
          } catch (innerError) {
            console.error(`‚ùå Error translating key ${key}:`, innerError);
            existingTranslations[key] = thText; // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          }
        }
      }
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á ordered flat entries ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå th.json
  const orderedFlatEntries: [string, string][] = [];
  for (const [key] of flatSource) {
    if (key in existingTranslations) {
      orderedFlatEntries.push([key, existingTranslations[key]]);
    }
  }

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    const dir = path.dirname(outputPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    const finalJSON = unflatten(orderedFlatEntries);
    fs.writeFileSync(outputPath, JSON.stringify(finalJSON, null, 2), "utf-8");
    console.log(`‚úÖ Written ${path.basename(outputPath)}`);
  } catch (error) {
    console.error(`‚ùå Error writing file ${outputPath}:`, error);
  }
}

async function processTranslations() {
  console.log(
    `üîç Starting translation script with TRANSLATE_ROOT: ${TRANSLATE_ROOT}`
  );

  if (!fs.existsSync(TRANSLATE_ROOT)) {
    console.error(`‚ùå TRANSLATE_ROOT not found: ${TRANSLATE_ROOT}`);
    process.exit(1);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
  if (FOLDER_STRUCTURE === "language-first") {
    await processLanguageFirstStructure();
  } else {
    await processNestedStructure();
  }

  console.log("\n‚úÖ Translation process completed!");
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
processTranslations().catch((error) => {
  console.error("‚ùå Script failed with error:", error);
  process.exit(1);
});
