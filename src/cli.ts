#!/usr/bin/env node
import { CONFIG } from "./config";
import { Anthropic } from "@anthropic-ai/sdk";
import fs from "fs";
import path from "path";

const apiKey = CONFIG.ANTHROPIC_API_KEY;
const TRANSLATE_ROOT = CONFIG.TRANSLATE_ROOT || "src/configs/translations";
const TARGET_LANGS = CONFIG.TARGET_LANGS || ["en"]; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
const MAX_BATCH_SIZE = CONFIG.MAX_BATCH_SIZE;
const args = process.argv.slice(2);
const FORCE_WRITE = args.includes("--force");

if (!apiKey) throw new Error("‚ùå Missing ANTHROPIC_API_KEY in environment");

const anthropic = new Anthropic({ apiKey });

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á object ‡πÄ‡∏õ‡πá‡∏ô flat format ‡πÅ‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö keys
function flatten(obj: any, prefix = ""): [string, string][] {
  let result: [string, string][] = [];

  // ‡πÉ‡∏ä‡πâ Object.entries ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á keys ‡πÑ‡∏ß‡πâ
  Object.entries(obj).forEach(([key, value]) => {
    const newKey = prefix ? `${prefix}.${key}` : key;

    if (typeof value === "object" && value !== null) {
      // ‡∏£‡∏ß‡∏° arrays ‡∏Ç‡∏≠‡∏á nested objects
      result = result.concat(flatten(value, newKey));
    } else if (value !== undefined) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° key-value pair ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array
      result.push([newKey, String(value)]);
    }
  });

  return result;
}

// ‡πÅ‡∏õ‡∏•‡∏á flat format ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô nested object ‡πÅ‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö
function unflatten(flat: [string, string][]): Record<string, any> {
  const result: Record<string, any> = {};

  for (const [key, value] of flat) {
    const parts = key.split(".");
    parts.reduce((acc, part, idx) => {
      if (idx === parts.length - 1) {
        acc[part] = value;
      } else {
        acc[part] = acc[part] || {};
      }
      return acc[part];
    }, result);
  }

  return result;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏´‡∏•‡∏≤‡∏¢ key ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
async function batchTranslateWithClaude(
  keysAndTexts: [string, string][],
  targetLang: string
): Promise<Record<string, string>> {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á structure ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ
  const textsToTranslate = keysAndTexts
    .map(([key, text]) => `${key}: "${text}"`)
    .join("\n");

  const prompt = `‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå TH ‡πÄ‡∏õ‡πá‡∏ô ${targetLang} ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏£ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n\n${textsToTranslate}\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö key: "‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•" ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô`;
  console.log(`üîÑ Batch translating ${keysAndTexts.length} keys...`);

  console.log(`========================================================\n`);
  console.log(`üì¶ Key Different: \n${textsToTranslate}`);
  const response = await anthropic.messages.create({
    model: "claude-3-haiku-20240307",
    max_tokens: 4000,
    temperature: 0.2,
    messages: [{ role: "user", content: prompt }],
  });

  console.log(`\nüì¶ Generate: \n ${JSON.stringify(response.content, null, 2)}`);
  console.log(`\n========================================================\n`);

  const content = response.content[0];
  if (!("text" in content)) {
    throw new Error("Unexpected response format from Claude");
  }

  const translatedText = content.text.trim();
  const results: Record<string, string> = {};

  // ‡πÅ‡∏¢‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô key-value
  const lines = translatedText.split("\n").filter((line) => line.trim() !== "");

  for (const line of lines) {
    // ‡πÅ‡∏¢‡∏Å key ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•
    const match = line.match(/^(.+?):\s*"(.+)"$/);
    if (match && match.length >= 3) {
      const key = match[1].trim();
      const translation = match[2].trim();

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      results[key] = translation;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  for (const [key, text] of keysAndTexts) {
    if (!(key in results)) {
      console.warn(`‚ö†Ô∏è Missing translation for key: ${key}, using source text`);
      results[key] = text;
    }
  }

  return results;
}

function findAllThJsonFolders(baseDir: string): string[] {
  const results: string[] = [];
  function recurse(currentPath: string) {
    try {
      const items = fs.readdirSync(currentPath, { withFileTypes: true });
      const hasTh = items.some((i) => i.isFile() && i.name === "th.json");
      if (hasTh) {
        results.push(currentPath);
      }
      items
        .filter((i) => i.isDirectory())
        .forEach((dir) => recurse(path.join(currentPath, dir.name)));
    } catch (error) {
      console.error(`Error accessing directory ${currentPath}:`, error);
    }
  }
  recurse(baseDir);
  return results;
}

function pathToIdentifier(fullPath: string): string {
  const relativePath = fullPath.replace(TRANSLATE_ROOT + path.sep, "");
  return relativePath.replace(/\\/g, "_").replace(/\//g, "_");
}

function isPathSelected(fullPath: string): boolean {
  if (args.length === 0) return true;

  const identifier = pathToIdentifier(fullPath);

  return args.some((arg) => {
    const argParts = arg.split("|");
    return argParts.some((part) => {
      if (part === identifier) return true;
      const lastPart = identifier.split("_").pop();
      if (lastPart === part) return true;
      if (identifier.includes(`_${part}_`) || identifier.endsWith(`_${part}`))
        return true;
      return false;
    });
  });
}

// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
function chunkIntoBatches<T>(arr: T[], size: number): T[][] {
  return Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>
    arr.slice(i * size, i * size + size)
  );
}

async function processTranslations() {
  console.log(
    `üîç Starting translation script with TRANSLATE_ROOT: ${TRANSLATE_ROOT}`
  );

  if (!fs.existsSync(TRANSLATE_ROOT)) {
    console.error(`‚ùå TRANSLATE_ROOT not found: ${TRANSLATE_ROOT}`);
    process.exit(1);
  }

  const folders = findAllThJsonFolders(TRANSLATE_ROOT);
  console.log(`üìÅ Found ${folders.length} folders with th.json`);

  if (folders.length === 0) {
    console.log(`Folders searched in: ${TRANSLATE_ROOT}`);
    console.log(`Current working directory: ${process.cwd()}`);
    process.exit(1);
  }

  for (const folder of folders) {
    const identifier = pathToIdentifier(folder);

    if (!isPathSelected(folder)) {
      console.log(`‚è≠Ô∏è Skipping ${identifier} - not selected`);
      continue;
    }

    const thPath = path.join(folder, "th.json");
    console.log(`\nüîÑ Processing: ${identifier}`);

    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      const thJSON = JSON.parse(fs.readFileSync(thPath, "utf-8"));
      const flatTH = flatten(thJSON);
      const thKeys = flatTH.map(([key]) => key);
      console.log(`üáπüá≠ Thai source: ${thKeys.length} keys`);

      // ‡πÅ‡∏õ‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      for (const lang of TARGET_LANGS) {
        const langPath = path.join(folder, `${lang}.json`);
        let existingFlatEntries: [string, string][] = [];
        let keysToTranslate: string[] = [];
        let keysToDelete: string[] = [];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (fs.existsSync(langPath)) {
          try {
            const existingJSON = JSON.parse(fs.readFileSync(langPath, "utf-8"));
            existingFlatEntries = flatten(existingJSON);
            const existingKeys = existingFlatEntries.map(([key]) => key);

            // ‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏°‡∏µ‡πÉ‡∏ô th ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•)
            keysToTranslate = thKeys.filter(
              (key) => !existingKeys.includes(key)
            );

            // ‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö (‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô th)
            keysToDelete = existingKeys.filter((key) => !thKeys.includes(key));

            console.log(
              `üåê ${lang.toUpperCase()}: Found ${existingKeys.length} keys, ${
                keysToTranslate.length
              } new keys to translate, ${keysToDelete.length} keys to remove`
            );
          } catch (error) {
            console.error(`‚ùå Error reading ${lang}.json:`, error);
            keysToTranslate = thKeys; // ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            existingFlatEntries = [];
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏ó‡∏∏‡∏Å key
          keysToTranslate = thKeys;
          console.log(
            `üåê ${lang}: No existing file, will translate all ${thKeys.length} keys`
          );
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if (
          keysToTranslate.length === 0 &&
          keysToDelete.length === 0 &&
          !FORCE_WRITE
        ) {
          console.log(`‚úÖ No changes needed for ${lang}`);
          continue;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á key ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        const existingTranslations = Object.fromEntries(existingFlatEntries);

        // ‡∏•‡∏ö key ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å existingTranslations
        keysToDelete.forEach((key) => {
          delete existingTranslations[key];
        });

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á keys ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° text
        const keysToTranslateWithText: [string, string][] = [];
        for (const key of keysToTranslate) {
          const thText = flatTH.find(([k]) => k === key)?.[1] || "";
          keysToTranslateWithText.push([key, thText]);
        }

        // ‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (keysToTranslateWithText.length > 0) {
          console.log(
            `üîÑ Translating ${keysToTranslateWithText.length} keys to ${lang}...`
          );

          // ‡πÅ‡∏ö‡πà‡∏á keys ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô batch
          const keyBatches = chunkIntoBatches(
            keysToTranslateWithText,
            MAX_BATCH_SIZE
          );
          console.log(`üì¶ Split into ${keyBatches.length} batches`);

          // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ batch
          for (let i = 0; i < keyBatches.length; i++) {
            const batch = keyBatches[i];
            console.log(
              `üì¶ Processing batch ${i + 1}/${keyBatches.length} with ${
                batch.length
              } keys`
            );

            try {
              // ‡πÅ‡∏õ‡∏•‡∏ó‡∏±‡πâ‡∏á batch ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
              const translatedBatch = await batchTranslateWithClaude(
                batch,
                lang
              );

              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô existingTranslations
              Object.entries(translatedBatch).forEach(
                ([key, translatedText]) => {
                  existingTranslations[key] = translatedText;
                }
              );
            } catch (error) {
              console.error(`‚ùå Error translating batch ${i + 1}:`, error);

              // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏ó‡∏±‡πâ‡∏á batch ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏õ‡∏•‡∏ó‡∏µ‡∏•‡∏∞ key ‡πÅ‡∏ó‡∏ô
              console.log(
                `‚ö†Ô∏è Falling back to individual key translation for batch ${
                  i + 1
                }`
              );
              for (const [key, thText] of batch) {
                try {
                  console.log(
                    `  üî§ Individually translating: ${key.substring(0, 30)}${
                      key.length > 30 ? "..." : ""
                    }`
                  );
                  const prompt = `‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå TH ‡πÄ‡∏õ‡πá‡∏ô ${lang} ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏£ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n\n"${thText}"`;

                  const response = await anthropic.messages.create({
                    model: "claude-3-haiku-20240307",
                    max_tokens: 1000,
                    temperature: 0.2,
                    messages: [{ role: "user", content: prompt }],
                  });

                  const content = response.content[0];
                  if ("text" in content) {
                    existingTranslations[key] = content.text
                      .trim()
                      .replace(/^"|"$/g, "");
                  } else {
                    existingTranslations[key] = thText;
                  }
                } catch (innerError) {
                  console.error(`‚ùå Error translating key ${key}:`, innerError);
                  existingTranslations[key] = thText; // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                }
              }
            }
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ordered flat entries ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå th.json
        const orderedFlatEntries: [string, string][] = [];
        for (const [key] of flatTH) {
          if (key in existingTranslations) {
            orderedFlatEntries.push([key, existingTranslations[key]]);
          }
        }

        // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        try {
          const finalJSON = unflatten(orderedFlatEntries);
          fs.writeFileSync(
            langPath,
            JSON.stringify(finalJSON, null, 2),
            "utf-8"
          );
          console.log(
            `‚úÖ Successfully updated ${lang}.json with ${orderedFlatEntries.length} keys`
          );
        } catch (error) {
          console.error(`‚ùå Error writing ${lang}.json:`, error);
        }
      }
    } catch (error) {
      console.error(`‚ùå Error processing folder ${folder}:`, error);
    }
  }

  console.log("\nüéâ Translation process completed!");
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
processTranslations().catch((error) => {
  console.error("‚ùå Script failed with error:", error);
  process.exit(1);
});
